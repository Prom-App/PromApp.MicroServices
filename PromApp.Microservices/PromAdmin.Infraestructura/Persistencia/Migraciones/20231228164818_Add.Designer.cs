// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PromAdmin.Infraestructura.Persistencia.Context;

#nullable disable

namespace PromAdmin.Infraestructura.Persistencia.Migraciones
{
    [DbContext(typeof(PromDbContext))]
    [Migration("20231228164818_Add")]
    partial class Add
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Acreditacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Internacional")
                        .HasColumnType("bit");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoAcreditacion")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TipoAcreditacion")
                        .IsUnique()
                        .HasFilter("[TipoAcreditacion] IS NOT NULL");

                    b.ToTable("TipoAcreditacion", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Actividad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoActividad")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TipoActividad")
                        .IsUnique()
                        .HasFilter("[TipoActividad] IS NOT NULL");

                    b.ToTable("TipoActividad", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Agencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique()
                        .HasFilter("[Nombre] IS NOT NULL");

                    b.ToTable("Agencia", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Aplicacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoAplicacion")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TipoAplicacion")
                        .IsUnique()
                        .HasFilter("[TipoAplicacion] IS NOT NULL");

                    b.ToTable("TipoAplicacion", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Avatar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique()
                        .HasFilter("[Nombre] IS NOT NULL");

                    b.ToTable("Avatar", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Campus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdCiudad")
                        .HasColumnType("int");

                    b.Property<int?>("IdUniversidad")
                        .HasColumnType("int");

                    b.Property<string>("LaFiesta")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdCiudad");

                    b.HasIndex("IdUniversidad");

                    b.HasIndex("Nombre", "IdUniversidad", "IdCiudad")
                        .IsUnique()
                        .HasFilter("[Nombre] IS NOT NULL AND [IdUniversidad] IS NOT NULL AND [IdCiudad] IS NOT NULL");

                    b.ToTable("Campus", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.CaracteristicaXUniversidad", b =>
                {
                    b.Property<int>("IdCaracteristica")
                        .HasColumnType("int");

                    b.Property<int>("IdCampus")
                        .HasColumnType("int");

                    b.HasKey("IdCaracteristica", "IdCampus");

                    b.HasIndex("IdCampus");

                    b.ToTable("CaracteristicasXUniversidad", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Carrera", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdTipoPrograma")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdTipoPrograma");

                    b.HasIndex("Nombre", "IdTipoPrograma")
                        .IsUnique()
                        .HasFilter("[Nombre] IS NOT NULL AND [IdTipoPrograma] IS NOT NULL");

                    b.ToTable("Carrera", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.CarreraRelacionada", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdCarrera")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdCarrera");

                    b.HasIndex("Nombre", "IdCarrera")
                        .IsUnique()
                        .HasFilter("[Nombre] IS NOT NULL AND [IdCarrera] IS NOT NULL");

                    b.ToTable("CarreraRelacionada", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.CarreraXUniversidad", b =>
                {
                    b.Property<int?>("IdUniversidad")
                        .HasColumnType("int");

                    b.Property<int?>("IdCarrera")
                        .HasColumnType("int");

                    b.Property<decimal?>("Costo")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUniversidad", "IdCarrera");

                    b.HasIndex("IdCarrera");

                    b.ToTable("CarreraXUniversidad", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Ciudad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abreviatura")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdDemografia")
                        .HasColumnType("int");

                    b.Property<int>("IdDepartamento")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdDemografia");

                    b.HasIndex("IdDepartamento");

                    b.HasIndex("Nombre", "IdDepartamento")
                        .IsUnique()
                        .HasFilter("[Nombre] IS NOT NULL");

                    b.ToTable("Ciudad", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Colegio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EsPrivado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdCiudad")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdCiudad");

                    b.HasIndex("Nombre", "IdCiudad")
                        .IsUnique()
                        .HasFilter("[Nombre] IS NOT NULL AND [IdCiudad] IS NOT NULL");

                    b.ToTable("Colegio", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Contacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Correo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdParentesco")
                        .HasColumnType("int");

                    b.Property<string>("IdUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("IdUsuarioContacto")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("IdParentesco");

                    b.HasIndex("IdUsuarioContacto");

                    b.HasIndex("UsuarioId");

                    b.HasIndex("IdUsuario", "IdParentesco", "Correo")
                        .IsUnique()
                        .HasFilter("[Correo] IS NOT NULL");

                    b.ToTable("Contacto", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Cualidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Caracteristica")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Caracteristica")
                        .IsUnique()
                        .HasFilter("[Caracteristica] IS NOT NULL");

                    b.ToTable("Cualidad", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.CualidadXPersonalidad", b =>
                {
                    b.Property<int>("IdCualidad")
                        .HasColumnType("int");

                    b.Property<int>("IdPersonalidad")
                        .HasColumnType("int");

                    b.Property<int?>("CualidadId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonalidadId")
                        .HasColumnType("int");

                    b.HasKey("IdCualidad", "IdPersonalidad");

                    b.HasIndex("CualidadId");

                    b.HasIndex("IdPersonalidad");

                    b.HasIndex("PersonalidadId");

                    b.ToTable("CualidadXPersonalidad", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Demografia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tamaño")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Tamaño")
                        .IsUnique()
                        .HasFilter("[Tamaño] IS NOT NULL");

                    b.ToTable("Demografia", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdPais")
                        .HasColumnType("int");

                    b.Property<string>("Iso3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdPais", "Nombre");

                    b.ToTable("Departamento", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Genero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Saludo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoGenero")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TipoGenero")
                        .IsUnique()
                        .HasFilter("[TipoGenero] IS NOT NULL");

                    b.ToTable("Genero", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Geografia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Caracteristica")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Caracteristica")
                        .IsUnique()
                        .HasFilter("[Caracteristica] IS NOT NULL");

                    b.ToTable("Geografia", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Idioma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lenguaje")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Lenguaje")
                        .IsUnique()
                        .HasFilter("[Lenguaje] IS NOT NULL");

                    b.ToTable("Idioma", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.IdiomaXUniversidad", b =>
                {
                    b.Property<int>("IdUniversidad")
                        .HasColumnType("int");

                    b.Property<int>("IdIdioma")
                        .HasColumnType("int");

                    b.HasKey("IdUniversidad", "IdIdioma");

                    b.HasIndex("IdIdioma");

                    b.ToTable("IdiomaXUniversidad", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Modulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreModulo")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NombreModulo")
                        .IsUnique()
                        .HasFilter("[NombreModulo] IS NOT NULL");

                    b.ToTable("Modulo", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Nacionalidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdPais")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Descripcion")
                        .IsUnique()
                        .HasFilter("[Descripcion] IS NOT NULL");

                    b.HasIndex("IdPais")
                        .IsUnique();

                    b.ToTable("Nacionalidad", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Pais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodigoTelefonico")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Iso2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Iso3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Moneda")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique()
                        .HasFilter("[Nombre] IS NOT NULL");

                    b.ToTable("Pais", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Parentesco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoParentesco")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TipoParentesco")
                        .IsUnique()
                        .HasFilter("[TipoParentesco] IS NOT NULL");

                    b.ToTable("Parentesco", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Personalidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Definicion")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique()
                        .HasFilter("[Codigo] IS NOT NULL");

                    b.HasIndex("Definicion")
                        .IsUnique()
                        .HasFilter("[Definicion] IS NOT NULL");

                    b.ToTable("Personalidad", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Pregunta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Enunciado")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdSeccion")
                        .HasColumnType("int");

                    b.Property<int>("IdTest")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoPregunta")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdSeccion");

                    b.HasIndex("IdTest");

                    b.HasIndex("IdTipoPregunta");

                    b.HasIndex("Enunciado", "IdTest")
                        .IsUnique()
                        .HasFilter("[Enunciado] IS NOT NULL");

                    b.ToTable("Pregunta", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Programa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoPrograma")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TipoPrograma")
                        .IsUnique()
                        .HasFilter("[TipoPrograma] IS NOT NULL");

                    b.ToTable("TipoPrograma", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Respuesta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Enunciado")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdPregunta")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdPregunta");

                    b.HasIndex("Enunciado", "IdPregunta")
                        .IsUnique()
                        .HasFilter("[Enunciado] IS NOT NULL");

                    b.ToTable("Respuesta", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.RespuestaXTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdPregunta")
                        .HasColumnType("int");

                    b.Property<int>("IdTestUsuario")
                        .HasColumnType("int");

                    b.Property<string>("IdsRespuesta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pregunta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Respuesta")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdTestUsuario");

                    b.ToTable("RespuestaXTest", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Seccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdTest")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreSeccion")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("IdTest");

                    b.HasIndex("NombreSeccion", "IdTest")
                        .IsUnique()
                        .HasFilter("[NombreSeccion] IS NOT NULL AND [IdTest] IS NOT NULL");

                    b.ToTable("Seccion", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdModulo")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreTest")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Observacion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdModulo");

                    b.HasIndex("NombreTest", "IdModulo")
                        .IsUnique()
                        .HasFilter("[NombreTest] IS NOT NULL AND [IdModulo] IS NOT NULL");

                    b.ToTable("Test", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.TestXUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Finalizado")
                        .HasColumnType("bit");

                    b.Property<int>("IdTest")
                        .HasColumnType("int");

                    b.Property<string>("IdUsuario")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdTest");

                    b.HasIndex("IdUsuario");

                    b.ToTable("TestXUsuario", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.TipoAcreditacionXColegio", b =>
                {
                    b.Property<int>("IdColegio")
                        .HasColumnType("int");

                    b.Property<int>("IdAcreditacion")
                        .HasColumnType("int");

                    b.HasKey("IdColegio", "IdAcreditacion");

                    b.HasIndex("IdAcreditacion");

                    b.ToTable("TipoAcreditacionXColegio", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.TipoActividadXCampus", b =>
                {
                    b.Property<int>("IdCampus")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoActividad")
                        .HasColumnType("int");

                    b.HasKey("IdCampus", "IdTipoActividad");

                    b.HasIndex("IdTipoActividad");

                    b.ToTable("TipoActividadXCampus", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.TipoPregunta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Tipo")
                        .IsUnique()
                        .HasFilter("[Tipo] IS NOT NULL");

                    b.ToTable("TipoPregunta", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.TipoProgramaXUniversidad", b =>
                {
                    b.Property<int>("IdTipoPrograma")
                        .HasColumnType("int");

                    b.Property<int>("IdUniversidad")
                        .HasColumnType("int");

                    b.HasKey("IdTipoPrograma", "IdUniversidad");

                    b.HasIndex("IdUniversidad");

                    b.ToTable("TipoProgramaXUniversidad", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Universidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EsPrivada")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdAgencia")
                        .HasColumnType("int");

                    b.Property<int?>("IdPais")
                        .HasColumnType("int");

                    b.Property<int?>("IdTipoAplicacion")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ranking")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdAgencia");

                    b.HasIndex("IdTipoAplicacion");

                    b.HasIndex("IdPais", "Nombre")
                        .IsUnique()
                        .HasFilter("[IdPais] IS NOT NULL AND [Nombre] IS NOT NULL");

                    b.ToTable("Universidad", (string)null);
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdAvatar")
                        .HasColumnType("int");

                    b.Property<int?>("IdCiudad")
                        .HasColumnType("int");

                    b.Property<int?>("IdColegio")
                        .HasColumnType("int");

                    b.Property<int?>("IdGenero")
                        .HasColumnType("int");

                    b.Property<int?>("IdNacionalidad")
                        .HasColumnType("int");

                    b.Property<int?>("IdNacionalidad2")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("IdAvatar");

                    b.HasIndex("IdCiudad");

                    b.HasIndex("IdColegio");

                    b.HasIndex("IdGenero");

                    b.HasIndex("IdNacionalidad");

                    b.HasIndex("IdNacionalidad2");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PromAdmin.Dominio.Entidades.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PromAdmin.Dominio.Entidades.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PromAdmin.Dominio.Entidades.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PromAdmin.Dominio.Entidades.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Campus", b =>
                {
                    b.HasOne("PromAdmin.Dominio.Entidades.Ciudad", "Ciudad")
                        .WithMany("Campus")
                        .HasForeignKey("IdCiudad");

                    b.HasOne("PromAdmin.Dominio.Entidades.Universidad", "Universidad")
                        .WithMany("Campus")
                        .HasForeignKey("IdUniversidad");

                    b.Navigation("Ciudad");

                    b.Navigation("Universidad");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.CaracteristicaXUniversidad", b =>
                {
                    b.HasOne("PromAdmin.Dominio.Entidades.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("IdCampus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PromAdmin.Dominio.Entidades.Geografia", "Geografia")
                        .WithMany()
                        .HasForeignKey("IdCaracteristica")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");

                    b.Navigation("Geografia");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Carrera", b =>
                {
                    b.HasOne("PromAdmin.Dominio.Entidades.Programa", "TipoPrograma")
                        .WithMany("Carreras")
                        .HasForeignKey("IdTipoPrograma")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("TipoPrograma");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.CarreraRelacionada", b =>
                {
                    b.HasOne("PromAdmin.Dominio.Entidades.Carrera", "Carrera")
                        .WithMany("CarrerasRelacionadas")
                        .HasForeignKey("IdCarrera")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Carrera");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.CarreraXUniversidad", b =>
                {
                    b.HasOne("PromAdmin.Dominio.Entidades.Carrera", "Carrera")
                        .WithMany("CarrerasXuniversidad")
                        .HasForeignKey("IdCarrera")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PromAdmin.Dominio.Entidades.Universidad", "Universidad")
                        .WithMany("CarrerasXuniversidad")
                        .HasForeignKey("IdUniversidad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrera");

                    b.Navigation("Universidad");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Ciudad", b =>
                {
                    b.HasOne("PromAdmin.Dominio.Entidades.Demografia", "Demografia")
                        .WithMany("Ciudades")
                        .HasForeignKey("IdDemografia")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PromAdmin.Dominio.Entidades.Departamento", "Departamento")
                        .WithMany("Ciudades")
                        .HasForeignKey("IdDepartamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Demografia");

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Colegio", b =>
                {
                    b.HasOne("PromAdmin.Dominio.Entidades.Ciudad", "Ciudad")
                        .WithMany("Colegios")
                        .HasForeignKey("IdCiudad")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Ciudad");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Contacto", b =>
                {
                    b.HasOne("PromAdmin.Dominio.Entidades.Parentesco", "Parentesco")
                        .WithMany("Contactos")
                        .HasForeignKey("IdParentesco")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PromAdmin.Dominio.Entidades.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PromAdmin.Dominio.Entidades.Usuario", "UsuarioContacto")
                        .WithMany()
                        .HasForeignKey("IdUsuarioContacto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PromAdmin.Dominio.Entidades.Usuario", null)
                        .WithMany("Contactos")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Parentesco");

                    b.Navigation("Usuario");

                    b.Navigation("UsuarioContacto");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.CualidadXPersonalidad", b =>
                {
                    b.HasOne("PromAdmin.Dominio.Entidades.Cualidad", null)
                        .WithMany("CualidadesXPersonalidad")
                        .HasForeignKey("CualidadId");

                    b.HasOne("PromAdmin.Dominio.Entidades.Cualidad", "Cualidad")
                        .WithMany()
                        .HasForeignKey("IdCualidad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PromAdmin.Dominio.Entidades.Personalidad", "Personalidad")
                        .WithMany()
                        .HasForeignKey("IdPersonalidad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PromAdmin.Dominio.Entidades.Personalidad", null)
                        .WithMany("CualidadesXPersonalidad")
                        .HasForeignKey("PersonalidadId");

                    b.Navigation("Cualidad");

                    b.Navigation("Personalidad");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Departamento", b =>
                {
                    b.HasOne("PromAdmin.Dominio.Entidades.Pais", "Pais")
                        .WithMany("Departamentos")
                        .HasForeignKey("IdPais")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.IdiomaXUniversidad", b =>
                {
                    b.HasOne("PromAdmin.Dominio.Entidades.Idioma", "Idioma")
                        .WithMany()
                        .HasForeignKey("IdIdioma")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PromAdmin.Dominio.Entidades.Universidad", "Universidad")
                        .WithMany()
                        .HasForeignKey("IdUniversidad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Idioma");

                    b.Navigation("Universidad");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Nacionalidad", b =>
                {
                    b.HasOne("PromAdmin.Dominio.Entidades.Pais", "Pais")
                        .WithOne("Nacionalidad")
                        .HasForeignKey("PromAdmin.Dominio.Entidades.Nacionalidad", "IdPais")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Pregunta", b =>
                {
                    b.HasOne("PromAdmin.Dominio.Entidades.Seccion", "Seccion")
                        .WithMany("Preguntas")
                        .HasForeignKey("IdSeccion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PromAdmin.Dominio.Entidades.Test", "Prueba")
                        .WithMany("Preguntas")
                        .HasForeignKey("IdTest")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PromAdmin.Dominio.Entidades.TipoPregunta", "TipoPregunta")
                        .WithMany("Preguntas")
                        .HasForeignKey("IdTipoPregunta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prueba");

                    b.Navigation("Seccion");

                    b.Navigation("TipoPregunta");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Respuesta", b =>
                {
                    b.HasOne("PromAdmin.Dominio.Entidades.Pregunta", "Pregunta")
                        .WithMany("Respuestas")
                        .HasForeignKey("IdPregunta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pregunta");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.RespuestaXTest", b =>
                {
                    b.HasOne("PromAdmin.Dominio.Entidades.TestXUsuario", "Test")
                        .WithMany("RespuestasTest")
                        .HasForeignKey("IdTestUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Seccion", b =>
                {
                    b.HasOne("PromAdmin.Dominio.Entidades.Test", "Test")
                        .WithMany("Secciones")
                        .HasForeignKey("IdTest")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Test");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Test", b =>
                {
                    b.HasOne("PromAdmin.Dominio.Entidades.Modulo", "Modulo")
                        .WithMany("Pruebas")
                        .HasForeignKey("IdModulo")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Modulo");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.TestXUsuario", b =>
                {
                    b.HasOne("PromAdmin.Dominio.Entidades.Test", "Test")
                        .WithMany("TestsXUsuario")
                        .HasForeignKey("IdTest")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PromAdmin.Dominio.Entidades.Usuario", "Usuario")
                        .WithMany("TestsXUsuario")
                        .HasForeignKey("IdUsuario");

                    b.Navigation("Test");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.TipoAcreditacionXColegio", b =>
                {
                    b.HasOne("PromAdmin.Dominio.Entidades.Acreditacion", "TipoAcreditacion")
                        .WithMany()
                        .HasForeignKey("IdAcreditacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PromAdmin.Dominio.Entidades.Colegio", "Colegio")
                        .WithMany()
                        .HasForeignKey("IdColegio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Colegio");

                    b.Navigation("TipoAcreditacion");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.TipoActividadXCampus", b =>
                {
                    b.HasOne("PromAdmin.Dominio.Entidades.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("IdCampus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PromAdmin.Dominio.Entidades.Actividad", "TipoActividad")
                        .WithMany()
                        .HasForeignKey("IdTipoActividad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");

                    b.Navigation("TipoActividad");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.TipoProgramaXUniversidad", b =>
                {
                    b.HasOne("PromAdmin.Dominio.Entidades.Programa", "TipoPrograma")
                        .WithMany()
                        .HasForeignKey("IdTipoPrograma")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PromAdmin.Dominio.Entidades.Universidad", "Universidad")
                        .WithMany()
                        .HasForeignKey("IdUniversidad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoPrograma");

                    b.Navigation("Universidad");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Universidad", b =>
                {
                    b.HasOne("PromAdmin.Dominio.Entidades.Agencia", "Agencia")
                        .WithMany("Universidades")
                        .HasForeignKey("IdAgencia")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PromAdmin.Dominio.Entidades.Pais", "Pais")
                        .WithMany("Universidades")
                        .HasForeignKey("IdPais")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PromAdmin.Dominio.Entidades.Aplicacion", "TipoAplicacion")
                        .WithMany("Universidades")
                        .HasForeignKey("IdTipoAplicacion")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Agencia");

                    b.Navigation("Pais");

                    b.Navigation("TipoAplicacion");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Usuario", b =>
                {
                    b.HasOne("PromAdmin.Dominio.Entidades.Avatar", "Avatar")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdAvatar");

                    b.HasOne("PromAdmin.Dominio.Entidades.Ciudad", "Ciudad")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdCiudad");

                    b.HasOne("PromAdmin.Dominio.Entidades.Colegio", "Colegio")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdColegio");

                    b.HasOne("PromAdmin.Dominio.Entidades.Genero", "Genero")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdGenero");

                    b.HasOne("PromAdmin.Dominio.Entidades.Nacionalidad", "Nacionalidad")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdNacionalidad")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PromAdmin.Dominio.Entidades.Nacionalidad", "Nacionalidad2")
                        .WithMany()
                        .HasForeignKey("IdNacionalidad2")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Avatar");

                    b.Navigation("Ciudad");

                    b.Navigation("Colegio");

                    b.Navigation("Genero");

                    b.Navigation("Nacionalidad");

                    b.Navigation("Nacionalidad2");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Agencia", b =>
                {
                    b.Navigation("Universidades");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Aplicacion", b =>
                {
                    b.Navigation("Universidades");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Avatar", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Carrera", b =>
                {
                    b.Navigation("CarrerasRelacionadas");

                    b.Navigation("CarrerasXuniversidad");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Ciudad", b =>
                {
                    b.Navigation("Campus");

                    b.Navigation("Colegios");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Colegio", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Cualidad", b =>
                {
                    b.Navigation("CualidadesXPersonalidad");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Demografia", b =>
                {
                    b.Navigation("Ciudades");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Departamento", b =>
                {
                    b.Navigation("Ciudades");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Genero", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Modulo", b =>
                {
                    b.Navigation("Pruebas");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Nacionalidad", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Pais", b =>
                {
                    b.Navigation("Departamentos");

                    b.Navigation("Nacionalidad");

                    b.Navigation("Universidades");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Parentesco", b =>
                {
                    b.Navigation("Contactos");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Personalidad", b =>
                {
                    b.Navigation("CualidadesXPersonalidad");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Pregunta", b =>
                {
                    b.Navigation("Respuestas");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Programa", b =>
                {
                    b.Navigation("Carreras");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Seccion", b =>
                {
                    b.Navigation("Preguntas");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Test", b =>
                {
                    b.Navigation("Preguntas");

                    b.Navigation("Secciones");

                    b.Navigation("TestsXUsuario");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.TestXUsuario", b =>
                {
                    b.Navigation("RespuestasTest");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.TipoPregunta", b =>
                {
                    b.Navigation("Preguntas");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Universidad", b =>
                {
                    b.Navigation("Campus");

                    b.Navigation("CarrerasXuniversidad");
                });

            modelBuilder.Entity("PromAdmin.Dominio.Entidades.Usuario", b =>
                {
                    b.Navigation("Contactos");

                    b.Navigation("TestsXUsuario");
                });
#pragma warning restore 612, 618
        }
    }
}
